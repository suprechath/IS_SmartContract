services:
  DB:
    image: postgres
    container_name: commefficient_db
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER} 
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
    ports:
      - "5432:5432"
    # volumes:
    #   - db_data:/var/lib/postgresql/data 
    networks:
      - comm_efficient_network

  adminer:
    image: adminer
    container_name: my_adminer
    restart: always
    ports:
      - "8080:8080"  # Access Adminer on http://localhost:8080
    depends_on:
      - DB
    networks:
      - comm_efficient_network
  
  # hardhat:
  #   build:
  #     context: ./contracts
  #   container_name: hardhat_node
  #   restart: always
  #   ports:
  #     - "8545:8545"
  #   networks:
  #     - comm_efficient_network
  
  api:
    build:
        context: . # Use root directory as context
        dockerfile: backend/Dockerfile # Specify the Dockerfile location
    container_name: api_endpoint
    restart: always
    ports:
      - "5001:5001"
    environment:
      - NODE_ENV=development
      - DB_HOST=DB
    env_file:
      - ./backend/.env
    depends_on:
      - DB
      # - hardhat
    networks:
      - comm_efficient_network
    command: npm run start

  # frontend:
  #   build:
  #     context: ./comeff-fe # Path to your Next.js app
  #     dockerfile: Dockerfile
  #   container_name: comeff_frontend
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - comm_efficient_network
  #   # volumes:
  #   #   - ./comeff-fe:/app # Mounts the local directory into the container
  #   #   - /app/node_modules
  #   #   - /app/.next
  #   environment:
  #     - NEXT_PUBLIC_API_URL=http://backend:5000/api
  #   depends_on:
  #     - api

  # listener:
  #   build:
  #       context: . # Use root directory as context
  #       dockerfile: backend/Dockerfile # Specify the Dockerfile location
  #   container_name: event_listener
  #   restart: always
  #   environment:
  #     - NODE_ENV=development
  #     - DB_HOST=DB
  #     - network_wss_url=ws://hardhat:8545 
  #   env_file:
  #     - ./backend/.env
  #   depends_on:
  #     - DB
  #     - hardhat
  #     - api
  #   networks:
  #     - comm_efficient_network
  #   command: npm run start:listener

  # keeper:
  #   build:
  #     context: . # Use root directory as context
  #     dockerfile: backend/Dockerfile # Specify the Dockerfile location
  #   container_name: keeper_service
  #   restart: always
  #   environment:
  #     - NODE_ENV=development
  #     - DB_HOST=DB
  #     - network_rpc_url=http://hardhat:8545
  #   env_file:
  #     - ./backend/.env
  #   depends_on:
  #     - DB
  #     - hardhat
  #     - api
  #   networks:
  #     - comm_efficient_network
  #   command: npm run start:keeper
  
# Define the network for services to communicate
networks:
  comm_efficient_network:
    driver: bridge

# volumes:
#   db_data:
#   pgadmin_data:

# docker rm -f postgres-db
# docker-compose up -d --build
# docker-compose up -d

